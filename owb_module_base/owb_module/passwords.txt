from https://www.askpython.com/python/examples/storing-retrieving-passwords-securely

Encryption (hashing):
Steps that improve hashing:
1. Salt
- random data added to each pw hash to prevent hash clashes with identical passwords
- prevents against rainbow table attacks (bc identical pws no longer identical after hashing)
- unique per user

2. Pepper
- application-wide secret value added to pw hashes
- same across all pws (unlike salt)
- provides additional obstacle for leaked pw databases, bc need to know the pepper value as well

3. Hash iterations (incl with salt)
- massively delays brute force attacks including dictionary attacks 

*********************************

STEPS:
1. User creates login credentials including password
2. Generate a long, random salt value
3. Append an additional pepper value
4. Hash the salted password thousands of times (hash iterations)
5. Save the salt, hash iterations, hash value to the user's db record

When authenticating later (at login):
1. Retrieve the userâ€™s salt, iterations, and hash value from the database
2. Salt and hash the entered login password using the same parameters
3. Compare the login hash to stored hash to check for match

**********************************

SALT
function to create a 
cryptographically-secure 16 byte (128 bit) random salt value:

import os
 
def generate_salt():
  # 128 bit salt value 
  salt = os.urandom(16) 
  return salt

***********************************

For project:
- web interface: this is for organisations. Liaise with them to see how much
user data they want to save (i.e. personal info)